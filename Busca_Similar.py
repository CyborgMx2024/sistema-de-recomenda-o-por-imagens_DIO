# -*- coding: utf-8 -*-
"""Olá, este é o Colaboratory

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

!pip install tensorflow
!pip install keras
!pip install scikit-learn
!pip install pillow
!pip install matplotlib
!pip install pandas
!pip install opencv-python
!pip install numpy
!pip install os

import requests
from bs4 import BeautifulSoup
import os
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from io import BytesIO
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from sklearn.metrics.pairwise import cosine_similarity

# Função para buscar imagens no Google Imagens
def search_google_images(query, num_images=5):
    search_url = f"https://www.google.com/search?q={query}&tbm=isch"
    headers = {"User-Agent": "Mozilla/5.0"}
    response = requests.get(search_url, headers=headers)
    soup = BeautifulSoup(response.text, "html.parser")

    # Coletar URLs de imagens
    image_elements = soup.find_all("img", limit=num_images)
    image_urls = [img['src'] for img in image_elements if img['src'].startswith('http')]

    return image_urls

# Função para baixar uma imagem a partir da URL
def download_image(url):
    response = requests.get(url)
    img = Image.open(BytesIO(response.content))
    return img

# Função para carregar e pré-processar a imagem
def load_and_preprocess_image_from_url(url, target_size=(224, 224)):
    img = download_image(url)
    img = img.resize(target_size)
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    return preprocess_input(img_array)

# Carregar o modelo VGG16 pré-treinado
model = VGG16(weights='imagenet', include_top=False, pooling='avg')

# Função para extrair embeddings (características) da imagem
def get_image_embedding_from_url(model, image_url):
    preprocessed_image = load_and_preprocess_image_from_url(image_url)
    embedding = model.predict(preprocessed_image)
    return embedding

# Função para calcular a similaridade entre uma imagem de consulta e outras imagens da web
def find_similar_images_on_web(query_image_url, model, search_query, num_similar=5):
    query_embedding = get_image_embedding_from_url(model, query_image_url)

    # Buscar imagens na web relacionadas ao produto
    image_urls = search_google_images(search_query, num_images=num_similar)

    similarities = []
    for img_url in image_urls:
        product_embedding = get_image_embedding_from_url(model, img_url)
        similarity = cosine_similarity(query_embedding, product_embedding)[0][0]
        similarities.append((img_url, similarity))

    # Ordenar as imagens por similaridade
    similar_images = sorted(similarities, key=lambda x: x[1], reverse=True)

    return similar_images

# Definir a URL da imagem de consulta
query_image_url = 'https://cdn.dooca.store/117/products/bolsa-feminina-rosa_620x620+fill_ffffff.jpg?v=1626967527'  # Substituir por uma URL válida

# Definir o termo de busca para encontrar produtos semelhantes
search_query = query_image_url

# Encontrar imagens semelhantes na web
similar_images = find_similar_images_on_web(query_image_url, model, search_query, num_similar=5)

# Exibir os resultados
print("Imagens semelhantes encontradas:")
for img_url, similarity in similar_images:
    print(f"URL: {img_url}, Similaridade: {similarity:.2f}")
    img = download_image(img_url)
    plt.imshow(img)
    plt.show()